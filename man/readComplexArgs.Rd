% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readComplexArgs.R
\name{readComplexArgs}
\alias{readComplexArgs}
\title{Read Complex Args}
\usage{
readComplexArgs(
  arg_v,
  colSep_v = ";",
  varValSep_v = "\\\\.",
  valSep_v = ",",
  simplify_v = T
)
}
\arguments{
\item{arg_v}{vector containing the complex argument. See details for more info}

\item{colSep_v}{character. default is ";". Whatever character separates different columns in arg_v. See details}

\item{valSep_v}{character. default is ",'. Whatever character separates factor levels in arg_v. See details}

\item{simplify_v}{logical. default is TRUE.}

\item{varvalSep_v}{character. default is "\\." Whatever character separates a column name from its factor levels in arg_v. See details}
}
\value{
Returns a list of length = number of elements split by colSep_v, with those elements as the names. 
If factors provided, lists will have values in factor order. If not provided, lists will be empty with names only.
}
\description{
Split complex command-line arguments into their component pieces
}
\details{
When running a command-line Rscript, sometimes you need to pass complex arguments like comma-separated
lists of variables. You can't have any spaces in command-line args, so have to provide the argument all together
in one string and split it inside R.  

The format for a complex argument is: colName1.val1,val2,val3,...;colName2.val2,val2,...;colNameN...
So first there is a semi-colon separated vector of column specifications. The column specification
begins with the column name, optionally followed by factor levels for that column.

Each column can either have factor levels or not, they don't all have to be one or the other.

If you don't have factor levels, the argument is simply: colName1;colName2;colName3;...
In this case, ";" and ',' will be treated the same for backwards compatibility.

Note that colSep_v (;), varValSep_v (.), and valSep_v (,) can all be specified.
}
